"line","word_count","font_size","is_bold","color","title_case","label"
"Trace-based Just-in-Time Type Specialization for Dynamic","6","23.331","False","#000000","True","paragraph"
"Languages","1","23.331","False","#000000","True","paragraph"
"Andreas","1","13.205","False","#000000","True","paragraph"
"Gal∗+, Brendan","2","13.205","False","#000000","True","paragraph"
"Eich∗, Mike","2","13.205","False","#000000","True","paragraph"
"Shaver∗, David","2","13.205","False","#000000","True","paragraph"
"Anderson∗, David","2","13.205","False","#000000","True","paragraph"
"Mandelin∗,","1","13.205","False","#000000","True","paragraph"
"Mohammad R. Haghighat$, Blake","4","13.205","False","#000000","True","paragraph"
"Kaplan∗, Graydon","2","13.205","False","#000000","True","paragraph"
"Hoare∗, Boris","2","13.205","False","#000000","True","paragraph"
"Zbarsky∗, Jason","2","13.205","False","#000000","True","paragraph"
"Orendorff∗,","1","13.205","False","#000000","True","paragraph"
"Jesse","1","13.205","False","#000000","True","paragraph"
"Ruderman∗, Edwin Smith#, Rick Reitmaier#, Michael Bebenita+, Mason Chang+#, Michael Franz+","11","13.205","False","#000000","True","paragraph"
"Mozilla Corporation∗","2","10.805","False","#000000","True","paragraph"
"{gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman}@mozilla.com","1","8.348","False","#000000","False","paragraph"
"{edwsmith,rreitmai}@adobe.com Adobe Corporation#","3","10.805","False","#000000","False","paragraph"
"{mohammad.r.haghighat}@intel.com Intel Corporation$","3","10.805","False","#000000","False","paragraph"
"{mbebenit,changm,franz}@uci.edu University of California, Irvine+","5","10.805","False","#000000","False","paragraph"
"Abstract","1","14.258","False","#000000","True","heading"
"Dynamic languages such as JavaScript are more difﬁcult to com-","10","10.805","False","#000000","False","paragraph"
"pile than statically typed ones. Since no concrete type information","10","10.805","False","#000000","False","paragraph"
"is available, traditional compilers need to emit generic code that can","11","10.805","False","#000000","False","paragraph"
"handle all possible type combinations at runtime. We present an al-","11","10.805","False","#000000","False","paragraph"
"ternative compilation technique for dynamically-typed languages","6","10.805","False","#000000","False","paragraph"
"that identiﬁes frequently executed loop traces at run-time and then","10","10.805","False","#000000","False","paragraph"
"generates machine code on the ﬂy that is specialized for the ac-","12","10.805","False","#000000","False","paragraph"
"tual dynamic types occurring on each path through the loop. Our","11","10.805","False","#000000","False","paragraph"
"method provides cheap inter-procedural type specialization, and an","8","10.805","False","#000000","False","paragraph"
"elegant and efﬁcient way of incrementally compiling lazily discov-","9","10.805","False","#000000","False","paragraph"
"ered alternative paths through nested loops. We have implemented","9","10.805","False","#000000","False","paragraph"
"a dynamic compiler for JavaScript based on our technique and we","11","10.805","False","#000000","False","paragraph"
"have measured speedups of 10x and more for certain benchmark","10","10.805","False","#000000","False","paragraph"
"programs.","1","10.805","False","#000000","False","paragraph"
"Categories and Subject Descriptors D.3.4 [Programming Lan-","7","11.549","False","#000000","False","paragraph"
"guages]: Processors — Incremental compilers, code generation.","7","10.706","False","#000000","False","paragraph"
"General Terms Design, Experimentation, Measurement, Perfor-","6","10.805","False","#000000","True","paragraph"
"mance.","1","10.805","False","#000000","False","paragraph"
"Keywords JavaScript, just-in-time compilation, trace trees.","6","10.805","False","#000000","False","paragraph"
"Introduction","1","14.258","False","#000000","True","paragraph"
"Dynamic languages such as JavaScript, Python, and Ruby, are pop-","10","10.805","False","#000000","False","paragraph"
"ular since they are expressive, accessible to non-experts, and make","10","10.805","False","#000000","False","paragraph"
"deployment as easy as distributing a source ﬁle. They are used for","12","10.805","False","#000000","False","paragraph"
"small scripts as well as for complex applications. JavaScript, for","10","10.805","False","#000000","False","paragraph"
"example, is the de facto standard for client-side web programming","10","10.805","False","#000000","False","paragraph"
"Permission to make digital or hard copies of all or part of this work for personal or","17","8.403","False","#000000","False","paragraph"
"classroom use is granted without fee provided that copies are not made or distributed","14","8.403","False","#000000","False","paragraph"
"for proﬁt or commercial advantage and that copies bear this notice and the full citation","15","8.403","False","#000000","False","paragraph"
"on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute","16","8.403","False","#000000","False","paragraph"
"to lists, requires prior speciﬁc permission and/or a fee.","9","8.403","False","#000000","False","paragraph"
"PLDI’09,","1","8.403","False","#000000","True","paragraph"
"c? June 15–20, 2009, Dublin, Ireland.","6","8.403","False","#000000","True","paragraph"
"Copyright 2009 ACM 978-1-60558-392-1/09/06. . . $5.00","7","8.403","False","#000000","True","paragraph"
"and is used for the application logic of browser-based productivity","10","10.805","False","#000000","False","paragraph"
"applications such as Google Mail, Google Docs and Zimbra Col-","10","10.805","False","#000000","False","paragraph"
"laboration Suite. In this domain, in order to provide a ﬂuid user","12","10.805","False","#000000","False","paragraph"
"experience and enable a new generation of applications, virtual ma-","10","10.805","False","#000000","False","paragraph"
"chines must provide a low startup time and high performance.","10","10.805","False","#000000","False","paragraph"
"Compilers for statically typed languages rely on type informa-","9","10.805","False","#000000","False","paragraph"
"tion to generate efﬁcient machine code. In a dynamically typed pro-","11","10.805","False","#000000","False","paragraph"
"gramming language such as JavaScript, the types of expressions","9","10.805","False","#000000","False","paragraph"
"may vary at runtime. This means that the compiler can no longer","12","10.805","False","#000000","False","paragraph"
"easily transform operations into machine instructions that operate","8","10.805","False","#000000","False","paragraph"
"on one speciﬁc type. Without exact type information, the compiler","10","10.805","False","#000000","False","paragraph"
"must emit slower generalized machine code that can deal with all","11","10.805","False","#000000","False","paragraph"
"potential type combinations. While compile-time static type infer-","8","10.805","False","#000000","False","paragraph"
"ence might be able to gather type information to generate opti-","11","10.805","False","#000000","False","paragraph"
"mized machine code, traditional static analysis is very expensive","9","10.805","False","#000000","False","paragraph"
"and hence not well suited for the highly interactive environment of","11","10.805","False","#000000","False","paragraph"
"a web browser.","3","10.805","False","#000000","False","paragraph"
"We present a trace-based compilation technique for dynamic","8","10.805","False","#000000","False","paragraph"
"languages that reconciles speed of compilation with excellent per-","9","10.805","False","#000000","False","paragraph"
"formance of the generated machine code. Our system uses a mixed-","11","10.805","False","#000000","False","paragraph"
"mode execution approach: the system starts running JavaScript in a","10","10.805","False","#000000","False","paragraph"
"fast-starting bytecode interpreter. As the program runs, the system","9","10.805","False","#000000","False","paragraph"
"identiﬁes hot (frequently executed) bytecode sequences, records","7","10.805","False","#000000","False","paragraph"
"them, and compiles them to fast native code. We call such a se-","13","10.805","False","#000000","False","paragraph"
"quence of instructions a trace.","5","10.805","False","#000000","False","paragraph"
"Unlike method-based dynamic compilers, our dynamic com-","7","10.805","False","#000000","False","paragraph"
"piler operates at the granularity of individual loops. This design","10","10.805","False","#000000","False","paragraph"
"choice is based on the expectation that programs spend most of","11","10.805","False","#000000","False","paragraph"
"their time in hot loops. Even in dynamically typed languages, we","11","10.805","False","#000000","False","paragraph"
"expect hot loops to be mostly type-stable, meaning that the types of","12","10.805","False","#000000","False","paragraph"
"values are invariant. (12) For example, we would expect loop coun-","11","10.805","False","#000000","False","paragraph"
"ters that start as integers to remain integers for all iterations. When","12","10.805","False","#000000","False","paragraph"
"both of these expectations hold, a trace-based compiler can cover","10","10.805","False","#000000","False","paragraph"
"the program execution with a small number of type-specialized, ef-","10","10.805","False","#000000","False","paragraph"
"ﬁciently compiled traces.","3","10.805","False","#000000","False","paragraph"
"Each compiled trace covers one path through the program with","10","10.805","False","#000000","False","paragraph"
"one mapping of values to types. When the VM executes a compiled","12","10.805","False","#000000","False","paragraph"
"trace, it cannot guarantee that the same path will be followed","11","10.805","False","#000000","False","paragraph"
"or that the same types will occur in subsequent loop iterations.","11","10.805","False","#000000","False","paragraph"
